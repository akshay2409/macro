# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
  - name: NEXIAL_HOME
    displayName: Nexial Location
    type: string
    default: C:\projects\nexial-core
  - name: AVIMARK_HOME
    displayName: AVIMark Location
    type: string
    default: C:\AVIMARK\Automation\Avimark
  - name: SCRIPT_NAME
    displayName: Target Nexial script
    type: string
    default: macroTest
    values:
      - complex-script
      - macro1Test
      - macroTest2
      - macroTest
      - wrongTotalStepTally

trigger: none

pool: LocalAgent
#   vmImage: ubuntu-latest

steps:
  - script: |
      set NEXIAL_HOME=${{ parameters.NEXIAL_HOME }}
      set AVIMARK_HOME=${{ parameters.AVIMARK_HOME }}
      set PROJECT_HOME=$(Build.Repository.LocalPath)
      set SCRIPT_NAME=${{ parameters.SCRIPT_NAME }}
      set SCRIPT_FILE=%PROJECT_HOME%\artifact\script\%SCRIPT_NAME%.xlsx
      set NEXIAL_OUTPUT=
      echo '%PROJECT_HOME%'
      echo '%NEXIAL_HOME%'
      echo '%SCRIPT_FILE%'
      echo '$(System.DefaultWorkingDirectory)/output'
      echo Agent.BuildDirectory               $(Agent.BuildDirectory)
      echo Agent.HomeDirectory                $(Agent.HomeDirectory)
      echo Agent.Id                           $(Agent.Id)
      echo Agent.JobName                      $(Agent.JobName)
      echo Agent.JobStatus                    $(Agent.JobStatus)
      echo Agent.MachineName                  $(Agent.MachineName)
      echo Agent.Name                         $(Agent.Name)
      echo Agent.OS                           $(Agent.OS)
      echo Agent.OSArchitecture               $(Agent.OSArchitecture)
      echo Agent.TempDirectory                $(Agent.TempDirectory)
      echo Agent.ToolsDirectory               $(Agent.ToolsDirectory)
      echo Agent.WorkFolder                   $(Agent.WorkFolder)
      echo Build.ArtifactStagingDirectory     $(Build.ArtifactStagingDirectory)
      echo Build.BinariesDirectory            $(Build.BinariesDirectory)
      echo Build.BuildId                      $(Build.BuildId)
      echo Build.BuildNumber                  $(Build.BuildNumber)
      echo Build.BuildUri                     $(Build.BuildUri)
      echo Build.ContainerId                  $(Build.ContainerId)
      echo Build.DefinitionName               $(Build.DefinitionName)
      echo Build.DefinitionVersion            $(Build.DefinitionVersion)
      echo Build.QueuedBy                     $(Build.QueuedBy)
      echo Build.QueuedById                   $(Build.QueuedById)
      echo Build.Reason                       $(Build.Reason)
      echo Build.Repository.Clean             $(Build.Repository.Clean)
      echo Build.Repository.ID                $(Build.Repository.ID)
      echo Build.Repository.LocalPath         $(Build.Repository.LocalPath)
      echo Build.Repository.Name              $(Build.Repository.Name)
      echo Build.Repository.Provider          $(Build.Repository.Provider)
      echo Build.Repository.Uri               $(Build.Repository.Uri)
      echo Build.RequestedFor                 $(Build.RequestedFor)
      echo Build.RequestedForEmail            $(Build.RequestedForEmail)
      echo Build.RequestedForId               $(Build.RequestedForId)
      echo Build.SourceBranch                 $(Build.SourceBranch)
      echo Build.SourceBranchName             $(Build.SourceBranchName)
      echo Build.SourceVersionMessage         $(Build.SourceVersionMessage)
      echo Build.SourcesDirectory             $(Build.SourcesDirectory)
      echo Build.StagingDirectory             $(Build.StagingDirectory)
      echo Build.TriggeredBy.BuildId          $(Build.TriggeredBy.BuildId)
      echo Build.TriggeredBy.BuildNumber      $(Build.TriggeredBy.BuildNumber)
      echo Build.TriggeredBy.DefinitionId     $(Build.TriggeredBy.DefinitionId)
      echo Build.TriggeredBy.DefinitionName   $(Build.TriggeredBy.DefinitionName)
      echo Build.TriggeredBy.ProjectID        $(Build.TriggeredBy.ProjectID)
      echo Common.TestResultsDirectory        $(Common.TestResultsDirectory)
      echo Pipeline.Workspace                 $(Pipeline.Workspace)
      echo System.DefaultWorkingDirectory     $(System.DefaultWorkingDirectory)
      echo System.HostType                    $(System.HostType)
      echo System.JobDisplayName              $(System.JobDisplayName)
      echo System.JobId                       $(System.JobId)
      echo System.JobName                     $(System.JobName)
      echo System.PhaseDisplayName            $(System.PhaseDisplayName)
      echo System.PhaseName                   $(System.PhaseName)
      echo System.TeamProject                 $(System.TeamProject)
      echo System.TeamProjectId               $(System.TeamProjectId)

      cd /d %NEXIAL_HOME%
      cd bin
      nexial.cmd -script %SCRIPT_FILE%
      echo.
    displayName: Run AVIMark POC script
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: |
        /**/junit.xml
        **/junit.xml
      searchFolder: '$(System.DefaultWorkingDirectory)/output'
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: 'TestPlan :: ${{ parameters.SCRIPT_NAME }}'
